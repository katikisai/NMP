{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\happie-world\\\\src\\\\components\\\\Counter.js\";\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }               //UI is not Re-rendring\r\n    }\r\n    Increment(){\r\n        this.state.count = this.state.count + 1\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          //never modify rthe state the directly        \r\n    }              // instaed make use of setState.\r\n    Increment(){\r\n        this.setState({\r\n            count:this.state.count+1\r\n        })\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    IncrementFive(){\r\n        this.Increment()   //0 locked 5 times \r\n        this.Increment()   //1 locked 5 times from Callback\r\n        this.Increment()  //this behaviour of React may grouped multiple seState calls\r\n        this.Increment()  //into a single update fro better performence all the 5 setState calls\r\n        this.Increment()  //are done in dene in one single go updated value doesnot carry over b/w\r\n    }      //the different calls.so whenever you have  updated the state based on the previous state we need pass\r\n    render(){ //function as an argument to setstate() instead of passing in an object\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.IncrementFive()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  Increment() {\n    /*this.setState(\r\n        {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n        count:this.state.count+1\r\n    },\r\n    ()=>{\r\n        console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n    })\r\n    console.log(this.state.count)  //0 is from Synchronous console.log*/\n    this.setState(prevState => ({\n      count: prevState.count + 1\n    }));\n    console.log(this.state.count);\n  }\n\n  IncrementFive() {\n    this.Increment(); //0 locked 5 times \n\n    this.Increment(); //1 locked 5 times from Callback\n\n    this.Increment(); //this behaviour of React may grouped multiple seState calls\n\n    this.Increment(); //into a single update fro better performence all the 5 setState calls\n\n    this.Increment(); //are done in dene in one single go updated value doesnot carry over b/w\n  } //the different calls.so whenever you have  updated the state based on the previous state we need pass\n\n\n  render() {\n    //function as an argument to setstate() instead of passing in an object\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"count-\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.IncrementFive(),\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:/React/happie-world/src/components/Counter.js"],"names":["React","Component","Counter","constructor","props","state","count","Increment","setState","prevState","console","log","IncrementFive","render"],"mappingscC,SAAd,QAA8B,OAA9B;;;AACA,MAAMC,OAAN,SAAsBD,SAAtB,CAA+B;AAC3BE,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAC;AADG,KAAb;AAGH;;AACDC,EAAAA,SAAS,GAAE;AACP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,SAAKC,QAAL,CAAeC,SAAD,KAAc;AACxBH,MAAAA,KAAK,EAACG,SAAS,CAACH,KAAV,GAAgB;AADE,KAAd,CAAd;AAGAI,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAL,CAAWC,KAAvB;AACH;;AACDM,EAAAA,aAAa,GAAE;AACX,SAAKL,SAAL,GADW,CACQ;;AACnB,SAAKA,SAAL,GAFW,CAEQ;;AACnB,SAAKA,SAAL,GAHW,CAGO;;AAClB,SAAKA,SAAL,GAJW,CAIO;;AAClB,SAAKA,SAAL,GALW,CAKO;AACrB,GA3B0B,CA2BpB;;;AACPM,EAAAA,MAAM,GAAE;AAAE;AACN,wBACA;AAAA,8BACI;AAAA,6BAAY,KAAKR,KAAL,CAAWC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAI,MAAK,KAAKM,aAAL,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAMH;;AAnC0B;;AAqC/B,eAAeV,OAAf","sourcesContent":["/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }               //UI is not Re-rendring\r\n    }\r\n    Increment(){\r\n        this.state.count = this.state.count + 1\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\n\r\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          //never modify rthe state the directly        \r\n    }              // instaed make use of setState.\r\n    Increment(){\r\n        this.setState({\r\n            count:this.state.count+1\r\n        })\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\n\r\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\n\r\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    IncrementFive(){\r\n        this.Increment()   //0 locked 5 times \r\n        this.Increment()   //1 locked 5 times from Callback\r\n        this.Increment()  //this behaviour of React may grouped multiple seState calls\r\n        this.Increment()  //into a single update fro better performence all the 5 setState calls\r\n        this.Increment()  //are done in dene in one single go updated value doesnot carry over b/w\r\n    }      //the different calls.so whenever you have  updated the state based on the previous state we need pass\r\n    render(){ //function as an argument to setstate() instead of passing in an object\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.IncrementFive()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\nimport React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        /*this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log*/\r\n        this.setState((prevState)=>({\r\n            count:prevState.count+1\r\n        }))\r\n        console.log(this.state.count)\r\n    }\r\n    IncrementFive(){\r\n        this.Increment()   //0 locked 5 times \r\n        this.Increment()   //1 locked 5 times from Callback\r\n        this.Increment()  //this behaviour of React may grouped multiple seState calls\r\n        this.Increment()  //into a single update fro better performence all the 5 setState calls\r\n        this.Increment()  //are done in dene in one single go updated value doesnot carry over b/w\r\n    }      //the different calls.so whenever you have  updated the state based on the previous state we need pass\r\n    render(){ //function as an argument to setstate() instead of passing in an object\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.IncrementFive()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter"]},"metadata":{},"sourceType":"module"}