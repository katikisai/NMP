{"ast":null,"code":"/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }               //UI is not Re-rendring\r\n    }\r\n    Increment(){\r\n        this.state.count = this.state.count + 1\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          //never modify rthe state the directly        \r\n    }              // instaed make use of setState.\r\n    Increment(){\r\n        this.setState({\r\n            count:this.state.count+1\r\n        })\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    IncrementFive(){\r\n        this.Increment()   //0 locked 5 times \r\n        this.Increment()   //1 locked 5 times from Callback\r\n        this.Increment()  //this behaviour of React may grouped multiple seState calls\r\n        this.Increment()  //into a single update fro better performence all the 5 setState calls\r\n        this.Increment()  //are done in dene in one single go updated value doesnot carry over b/w\r\n    }      //the different calls.so whenever you have  updated the state based on the previous state we need pass\r\n    render(){ //function as an argument to setstate() instead of passing in an object\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.IncrementFive()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\n\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        /*this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log*/\n\n/*this.setState((prevState)=>({\r\n    count:prevState.count+1   //when we update the state based on previous state make sure passing the function as an argument instaed of regular object\r\n}))\r\nconsole.log(this.state.count)\r\n}\r\nIncrementFive(){\r\nthis.Increment()   //0 locked 5 times \r\nthis.Increment()   //1 locked 5 times from Callback\r\nthis.Increment()  //this behaviour of React may grouped multiple seState calls\r\nthis.Increment()  //into a single update fro better performence all the 5 setState calls\r\nthis.Increment()  //are done in dene in one single go updated value doesnot carry over b/w\r\n}      //the different calls.so whenever you have  updated the state based on the previous state we need pass\r\nrender(){ //function as an argument to setstate() instead of passing in an object\r\nreturn(\r\n<div>\r\n    <div>count-{this.state.count}</div>\r\n    <button onClick = {()=> this.IncrementFive()}>Increment</button>\r\n</div>\r\n)\r\n}\r\n}\r\nexport default Counter\r\n//setState()\r\n//always make use of setState and never modify the state directly\r\n//if the certain code has been executed after the state has been updated?place the code in the callback function which is the 2nd parameter to the setState()\r\n//when you have to update the state based on the previous state value.pass in a function as an argument instead of the regular object */","map":{"version":3,"sources":["C:/React/happie-world/src/components/Counter.js"],"names":[],"mappingssourcesContent":["/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }               //UI is not Re-rendring\r\n    }\r\n    Increment(){\r\n        this.state.count = this.state.count + 1\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\n\r\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          //never modify rthe state the directly        \r\n    }              // instaed make use of setState.\r\n    Increment(){\r\n        this.setState({\r\n            count:this.state.count+1\r\n        })\r\n        console.log(this.state.count)\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\n\r\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.Increment()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\n\r\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log\r\n    }\r\n    IncrementFive(){\r\n        this.Increment()   //0 locked 5 times \r\n        this.Increment()   //1 locked 5 times from Callback\r\n        this.Increment()  //this behaviour of React may grouped multiple seState calls\r\n        this.Increment()  //into a single update fro better performence all the 5 setState calls\r\n        this.Increment()  //are done in dene in one single go updated value doesnot carry over b/w\r\n    }      //the different calls.so whenever you have  updated the state based on the previous state we need pass\r\n    render(){ //function as an argument to setstate() instead of passing in an object\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.IncrementFive()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter*/\r\n\r\n/*import React,{Component} from 'react'\r\nclass Counter extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            count:0\r\n        }          \r\n    }              \r\n    Increment(){\r\n        /*this.setState(\r\n            {    //setState() has two parameters 1)setState Object 2)Callback Arrow function\r\n            count:this.state.count+1\r\n        },\r\n        ()=>{\r\n            console.log('Callback value',this.state.count)   //1 is from Callback function console.log statement\r\n        })\r\n        console.log(this.state.count)  //0 is from Synchronous console.log*/\r\n        /*this.setState((prevState)=>({\r\n            count:prevState.count+1   //when we update the state based on previous state make sure passing the function as an argument instaed of regular object\r\n        }))\r\n        console.log(this.state.count)\r\n    }\r\n    IncrementFive(){\r\n        this.Increment()   //0 locked 5 times \r\n        this.Increment()   //1 locked 5 times from Callback\r\n        this.Increment()  //this behaviour of React may grouped multiple seState calls\r\n        this.Increment()  //into a single update fro better performence all the 5 setState calls\r\n        this.Increment()  //are done in dene in one single go updated value doesnot carry over b/w\r\n    }      //the different calls.so whenever you have  updated the state based on the previous state we need pass\r\n    render(){ //function as an argument to setstate() instead of passing in an object\r\n        return(\r\n        <div>\r\n            <div>count-{this.state.count}</div>\r\n            <button onClick = {()=> this.IncrementFive()}>Increment</button>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter\r\n//setState()\r\n//always make use of setState and never modify the state directly\r\n//if the certain code has been executed after the state has been updated?place the code in the callback function which is the 2nd parameter to the setState()\r\n//when you have to update the state based on the previous state value.pass in a function as an argument instead of the regular object */\r\n"]},"metadata":{},"sourceType":"module"}